plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

subprojects {
    group = rootProject.group
    version = rootProject.version
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

// This task copies the public certificate into the resources of the server and paper modules
// so it can be used for verification.
tasks.register('copyCert', Copy) {
    description = 'Copies the public certificate to the resources directories for embedding.'
    from 'Integrity'
    into 'src/main/resources'
    into 'paper/src/main/resources'
    include 'public.cer'
}

// Ensure the certificate is copied before the resources are processed.
tasks.withType(ProcessResources).configureEach {
    dependsOn tasks.named('copyCert')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

afterEvaluate {
    // This task signs the remapped Fabric JAR using the keystore in the Integrity folder.
    tasks.register('signFabricJar') {
        group = 'build'
        description = 'Signs the remapped Fabric client JAR.'
        dependsOn(tasks.named('remapJar'))

        def remappedJarProvider = tasks.named('remapJar').flatMap { it.outputs.files.elements.map { fs -> fs.first().asFile } }
        def signedJar = layout.buildDirectory.file("libs/${project.archives_base_name}-${project.version}-signed.jar")

        inputs.file(remappedJarProvider)
        inputs.file('Integrity/keystore.jks')
        outputs.file(signedJar)

        doLast {
            def jarToSign = remappedJarProvider.get()
            if (file('Integrity/keystore.jks').exists()) {
                println "--> Signing JAR: ${jarToSign.name}"
                exec {
                    executable = 'jarsigner'
                    args = [
                        '-keystore', file('Integrity/keystore.jks').absolutePath,
                        '-storepass', 'password',
                        '-signedjar', signedJar.get().asFile.absolutePath,
                        jarToSign.absolutePath,
                        'handshaker'
                    ]
                }
            } else {
                println "--> Keystore not found in Integrity/keystore.jks. Skipping signing."
            }
        }
    }

    tasks.register('mergeJars', Jar) {
        group = 'build'
        description = 'Merges the Fabric and Paper jars into one combined jar'

        dependsOn(tasks.named('signFabricJar')) // Ensure signing happens before merging

        def signedJarProvider = tasks.named('signFabricJar').flatMap { it.outputs.files.elements.map { fs -> fs.first().asFile } }
        def paperJarProvider = project(':paper').tasks.named('jar').flatMap { it.archiveFile }

        // --- Merge contents lazily ---
        from(signedJarProvider.map { file -> zipTree(file) })
        from(paperJarProvider.map { file -> zipTree(file) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'public.cer'
        }

        archiveBaseName.set("${project.archives_base_name}-merged")
        destinationDirectory.set(layout.buildDirectory.dir("output"))

        // --- Copy manifest lazily from the Fabric jar ---
        manifest {
            from(signedJarProvider.map { file ->
                zipTree(file).matching {
                    include 'META-INF/MANIFEST.MF'
                }.files.first()
            })
        }
    }

    // Run mergeJars automatically after build
    build.finalizedBy(tasks.named('mergeJars'))
}